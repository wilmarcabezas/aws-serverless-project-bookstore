# Book table
booksTable:
  Type: "AWS::DynamoDB::Table"
  Properties: 
    AttributeDefinitions: 
      - AttributeName: "bookId"
        AttributeType: "S"
    BillingMode: "PAY_PER_REQUEST"
    KeySchema: 
      - AttributeName: "bookId"
        KeyType: "HASH"
    Tags: 
      - Key: "Name"
        Value: "books-table"

# Order table
# GlobalSecondaryIndex: Permite realizar consultas no solo por la llave principal, en este caso es la union del libro y la fecha de la orden.
# Projection: ALL indica que proyecta todos los atributos de la tabla.
orderTable:
  Type: "AWS::DynamoDB::Table"
  Properties: 
    AttributeDefinitions: 
      - AttributeName: "userId"
        AttributeType: "S"
      - AttributeName: "orderId"
        AttributeType: "S"
      - AttributeName: "bookId"
        AttributeType: "S"
      - AttributeName: "createdAt"
        AttributeType: "S"
    BillingMode: "PAY_PER_REQUEST"
    KeySchema: 
      - AttributeName: "userId"
        KeyType: "HASH"
      - AttributeName: "orderId"
        KeyType: "RANGE"
    GlobalSecondaryIndexes: 
      - IndexName: "byOrder"
        KeySchema: 
        - AttributeName: "bookId"
          KeyType: "HASH"
        - AttributeName: "createdAt"
          KeyType: "RANGE"
        Projection: 
          ProjectionType: "ALL"
    Tags: 
      - Key: "Name"
        Value: "order-table"

# Cognito user pool
# AWS::Cognito::UserPool es un tipo de recurso de CloudFormation que representa un grupo de usuarios de Amazon Cognito. 
# Un grupo de usuarios de Amazon Cognito es un *** directorio *** de usuarios que se puede utilizar para gestionar el registro y el inicio de sesión para aplicaciones móviles y web. 
# Proporciona una forma fácil para que los usuarios se registren y accedan a tu aplicación, e incluye soporte integrado para la autenticación de factor múltiple (MFA)
# y la integración con proveedores de identidad social como Facebook y Google.

# En el contexto de un grupo de usuarios de Amazon Cognito, la propiedad UsernameAttributes se utiliza para especificar los atributos que pueden usarse como nombre de usuario para un usuario. 
# El nombre de usuario es el nombre que los usuarios utilizan para iniciar sesión en el grupo de usuarios, y debe ser único dentro del grupo de usuarios.
# La propiedad UsernameAttributes es una matriz de cadenas, y puede contener uno o más de los siguientes valores:
  # phone_number: El número de teléfono del usuario.
  # email: La dirección de correo electrónico del usuario.
  # preferred_username: Un nombre de usuario preferido elegido por el usuario.
  
# AWS::Cognito::UserPoolClient es un tipo de recurso de CloudFormation que representa un cliente de un grupo de usuarios de Amazon Cognito. 
# Un cliente de un grupo de usuarios es una aplicación web o móvil que utiliza el grupo de usuarios para autenticar a sus usuarios.
cognitoUserPool:
  Type: "AWS::Cognito::UserPool"
  Properties: 
    UsernameAttributes: 
      - "email"
    UserPoolName: "YouTubeBookstoreUserpool"


# Cognito user pool client
# AWS::Cognito::UserPoolClient es un tipo de recurso de CloudFormation que representa un cliente de un grupo de usuarios de Amazon Cognito. 
# Un cliente de un grupo de usuarios es una aplicación web o móvil que utiliza el grupo de usuarios para autenticar a sus usuarios.
cognitoUserPoolClient:
  Type: "AWS::Cognito::UserPoolClient"
  Properties: 
    ClientName: "web"
    UserPoolId: !Ref cognitoUserPool

# Cognito user pool user group
cognitoCustomerGroup:
  Type: "AWS::Cognito::UserPoolGroup"
  Properties: 
    Description: "Customers belong to this group"
    GroupName: "customer"
    Precedence: 1
    RoleArn: !GetAtt cognitoCustomerIAMRole.Arn
    UserPoolId: !Ref cognitoUserPool

# Congnito admin IAM role
cognitoCustomerIAMRole:
  Type: "AWS::IAM::Role"
  Properties: 
    RoleName: "youtube-bookstore-customer-role"
    Description: "IAM role for customers"
    AssumeRolePolicyDocument: 
      Version: "2012-10-17"
      Statement: 
      - Effect: "Allow"
        Principal: 
          Federated:
            - "cognito-identity.amazonaws.com"
        Action: 
          - "sts:AssumeRoleWithWebIdentity" 
    Policies: 
      - PolicyName: "youtube-bookstore-customer-group-policy"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "dynamodb:*"
              Resource:
                - !GetAtt orderTable.Arn
            - Effect: "Allow"
              Action:
                - "dynamodb:GetItem"
                - "dynamodb:BatchGetItem"
                - "dynamodb:Query"
              Resource:
                - !GetAtt booksTable.Arn

# Cognito user pool admin group
cognitoAdminGroup:
  Type: "AWS::Cognito::UserPoolGroup"
  Properties: 
    Description: "Admin users belong to this group"
    GroupName: "admin"
    Precedence: 0
    RoleArn: !GetAtt cognitoAdminIAMRole.Arn
    UserPoolId: !Ref cognitoUserPool

# Congnito admin IAM role
cognitoAdminIAMRole:
  Type: "AWS::IAM::Role"
  Properties: 
    RoleName: "youtube-bookstore-admin-role"
    Description: "IAM role for admin users"
    AssumeRolePolicyDocument: 
      Version: "2012-10-17"
      Statement: 
      - Effect: "Allow"
        Principal: 
          Federated:
            - "cognito-identity.amazonaws.com"
        Action: 
          - "sts:AssumeRoleWithWebIdentity" 
    Policies: 
      - PolicyName: "youtube-bookstore-admin-group-policy"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "dynamodb:*"
              Resource:
                - !GetAtt booksTable.Arn
                - !GetAtt orderTable.Arn

# Congnito admin IAM role
cognitoUnauthIAMRole:
  Type: "AWS::IAM::Role"
  Properties: 
    RoleName: "youtube-bookstore-unauth-role"
    Description: "IAM role for guest users"
    AssumeRolePolicyDocument: 
      Version: "2012-10-17"
      Statement: 
      - Effect: "Allow"
        Principal: 
          Federated:
            - "cognito-identity.amazonaws.com"
        Action: 
          - "sts:AssumeRoleWithWebIdentity" 
    Policies: 
      - PolicyName: "youtube-bookstore-unauth-user-policy"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "appsync:GraphQL"
              Resource:
                - "arn:aws:appsync:us-west-1:885121665536:apis/4est5xj75fgfhkwrqfujp35rgq/types/Query/fields/getBookById"

cognitoIdentityPoolRoleAttachment:
  Type: AWS::Cognito::IdentityPoolRoleAttachment
  Properties: 
    IdentityPoolId: !Ref cognitoIdentityPool
    Roles: 
      unauthenticated: !GetAtt cognitoUnauthIAMRole.Arn
                
cognitoIdentityPool:
  Type: AWS::Cognito::IdentityPool
  Properties: 
    AllowUnauthenticatedIdentities: true
    CognitoIdentityProviders: 
      - ClientId: !Ref cognitoUserPoolClient
        ProviderName: !GetAtt cognitoUserPool.ProviderName
    IdentityPoolName: YoutubeBookStoreIdentityPool